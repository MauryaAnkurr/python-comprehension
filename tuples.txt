A tuple is a collection which is ordered and unchangeable. In Python tuples are written with round brackets.
________________________________________________________________________________________________________________________
Change Tuple Values-
Once a tuple is created, you cannot change its values. Tuples are unchangeable, or immutable as it also is called.
But there is a workaround. You can convert the tuple into a list, change the list, and convert the list back into a tuple.
________________________________________________________________________________________________________________________
thistuple = ("apple", "banana", "cherry")
for x in thistuple:
  print(x)
_____________________________________________________________________________
thistuple = ("apple", "banana", "cherry")
if "apple" in thistuple:
  print("Yes, 'apple' is in the fruits tuple")
__________________________________________________________
Creating a tuple with one element is a bit tricky.
Having one element within parentheses is not enough. We will need a trailing comma to indicate that it is, in fact, a tuple.

thistuple = ("apple",)
print(type(thistuple))

#NOT a tuple
thistuple = ("apple")
print(type(thistuple))
________________________________________________________
Note: You cannot remove items in a tuple.
Tuples are unchangeable, so you cannot remove items from it, but you can delete the tuple completely:
thistuple = ("apple", "banana", "cherry")
del thistuple
print(thistuple) #this will raise an error because the tuple no longer exists
_______________________________________________________________________
A tuple can also be created without using parentheses. This is known as tuple packing.
print(my_tuple)   # Output: 3, 4.6, "dog" 
print(type(my_tuple))
# tuple unpacking is also possible
a, b, c = my_tuple

print(a)      # 3
print(b)      # 4.6 
print(c)      # dog 
______________________________________________________________________________________________
Advantages of Tuple over List
Since tuples are quite similar to lists, both of them are used in similar situations as well.

However, there are certain advantages of implementing a tuple over a list. Below listed are some of the main advantages:

We generally use tuple for heterogeneous (different) datatypes and list for homogeneous (similar) datatypes.
Since tuples are immutable, iterating through tuple is faster than with list. So there is a slight performance boost.
Tuples that contain immutable elements can be used as a key for a dictionary. With lists, this is not possible.
If you have data that doesn't change, implementing it as tuple will guarantee that it remains write-protected.
_________________________________________________________________________________________________

Packing and Unpacking a Tuple : 
In Python there is a very powerful tuple assignment feature that assigns right hand side of values into left hand side. In other way it is called unpacking of a tuple of values into a variable. In packing, we put values into a new tuple while in unpacking we extract those values into a single variable.
# Program to understand about 
# packing and unpacking in Python 

# this lines PACKS values 
# into variable a 
a = ("MNNIT Allahabad", 5000, "Engineering") 

# this lines UNPACKS values 
# of variable a 
(college, student, type_ofcollege) = a 

# print college name 
print(college) 

# print no of student 
print(student) 

# print type of college 
print(type_ofcollege) 

______________________________________________________________________

In unpacking of tuple number of variables on left hand side should be equal to number of values in given tuple a.

Python uses a special syntax to pass optional arguments (*args) for tuple unpacking. This means that there can be many number of arguments in place of (*args) in python. All values will be assigned to every variable on left hand side and all remaining values will be assigned to *args .For better understanding consider the following code.
# Python code to study about 
# unpacking python tuple using * 

# first and last will be assigned to x and z 
# remaining will be assined to y 
x, *y, z = (10, "Geeks ", " for ", "Geeks ", 50) 

# print details 
print(x) 
print(y) 
print(z) 

# first and second will be assigned to x and y 
# remaining will be assined to z 
x, y, *z = (10, "Geeks ", " for ", "Geeks ", 50) 
print(x) 
print(y) 
print(z) 

Output:
10
['Geeks ', ' for ', 'Geeks ']
50
10
Geeks 
[' for ', 'Geeks ', 50]


_____________________________________________________________

In python tuples can be unpacked using a function in function tuple is passed and in function values are unpacked into normal variable. Consider the following code for better understanding.
# Python code to study about 
# unpacking python tuple using function 

# function takes normal arguments 
# and multiply them 
def result(x, y): 
	return x * y 
# function with normal variables 
print (result(10, 100)) 

# A tuple is created 
z = (10, 100) 

# Tuple is passed 
# function unpacked them 

print (result(*z)) 

output:
1000
1000

_________________________________________________________________________________
